const tag="funimation-video-detect";injectScript("\n  const tag = 'funimation'\n  const videos = Array.from(document.querySelectorAll('video'))\n\n  function registerVideoElement (video) {\n    video.addEventListener('loadedmetadata', function once () {\n      const videoData = {}\n      // video.removeEventListener('loadedmetadata', once)\n      const { language, alpha, episode, season, show } = fp\n      const { episodeTitle, episodeId, languages } = episode\n      const data = languages[language].alpha[alpha]\n      videoData.sources = data.sources\n      try {\n        const { show: { showTitle }, episode: { episodeId, episodeTitle }, season: { seasonTitle, seasonId: seasonIndex } } = fp\n        videoData.title = episodeId + ' ' + episodeTitle + ' - ' + showTitle + ' ' + seasonTitle\n        if (episodeId) {\n          videoData.episodeIndex = Number(episodeId)\n        }\n        videoData.episodeTitle = episodeTitle\n        videoData.showTitle = showTitle\n        videoData.seasonIndex = seasonIndex\n      } catch (e) {\n        videoData.title = showTitle\n      }\n      triggerEvent(window, 'found-video', JSON.parse(JSON.stringify(videoData)))\n    })\n  }\n  videos.forEach(video => registerVideoElement(video))\n\n  const videoObserver = new MutationObserver(mutations => {\n    for (const mutation of mutations) {\n      if (mutation.type === 'childList') {\n        const added = Array.from(mutation.addedNodes)\n        const videos = added.filter(node => node.tagName && node.tagName.toLowerCase() === 'video')\n        if (videos.length > 0) {\n          twosevenExtLog(tag, 'Found video')\n          registerVideoElement(video)\n        }\n      }\n    }\n  })\n  videoObserver.observe(document.body, {\n    childList: true,\n    subtree: true\n  })\n");const port=browser.runtime.connect({name:name});window.addEventListener("found-video",async e=>{const{detail:{data:o}}=e,{sources:n,...t}=o,i=n[0],{src:a,textTracks:d}=i,s=d.find(e=>e.src.endsWith("vtt"))||{},{src:r,label:l,language:c}=s,v=window.location.href,u=[{name:"Access-Control-Allow-Origin",value:"*"}],m={videoSelector:"web",referer:v,videoURL:`hls:${a}`,videoData:{...t,module:{name:"crunchyroll",loadMediaFromModule:!0,callModuleBG:!1,addHeaders:!0,useLocalURL:!1},referer:v,plyrProvider:"html5",mediaType:"hls",episode:{config:{streams:[{url:a}]},subtitles:[]},headers:u},origin:location.origin,from:tag,strategies:["url","iframe"],headers:u};r&&m.videoData.episode.subtitles.push({url:r,kind:"captions",label:l,language:c,vttReplaceLines:2}),port.postMessage({action:"add-tab-media",data:m})});