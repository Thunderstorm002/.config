class TTMLEntry{constructor(t){let e,{_text:r,_attributes:{begin:n,end:o},span:s}=t;if(!r&&!s)throw new Error(`No text or span: ${JSON.stringify(t)}`);if(!n||!o)throw new Error(`No begin/end: ${JSON.stringify(t)}`);n=TTMLEntry.convertTime(n),o=TTMLEntry.convertTime(o);try{if(s){Array.isArray(s)||(s=[s]);let t="";for(const n of s){let o;r=n._text;try{switch(o=n._attributes["tts:fontStyle"]){case"italic":e="i";break;case"bold":e="b"}}catch(t){}t+=this.getFormattedText(r,e)}r=t}Object.assign(this,{begin:n,end:o,text:r})}catch(e){throw console.error(JSON.stringify(t,null,2)),e}}static convertTime(t){const e=/(\d{2}:\d{2}:\d{2}):(\d+)/gm.exec(t);return`${e[1]}.${e[2].padStart(3,"0")}`}asVTT(){const{begin:t,end:e,text:r,style:n}=this,o=[`${t} --\x3e ${e}`],s=this.getFormattedText(r,n);return o.push(s+"\n"),o.join("\n")}getFormattedText(t,e){return e?`<${e}>${t}</${e}>`:t}}function convertTTMLToVTT(t){return new Promise((e,r)=>{try{const n=JSON.parse(xml2json(t,{compact:!0})).tt.body.div.p,o=["WEBVTT",""];n.forEach(t=>{try{t=new TTMLEntry(t),o.push(t.asVTT())}catch(t){console.error(t)}}),e(o.join("\n"))}catch(t){return r(t)}})}