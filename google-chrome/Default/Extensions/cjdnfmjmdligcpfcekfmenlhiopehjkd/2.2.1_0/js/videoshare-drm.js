injectScriptByURL(browser.extension.getURL("/node_modules/screenfull/dist/screenfull.js")),window.addEventListener("room-ready",()=>{function e(e,n){const o=["play","pause","seek","sourceChange","fullscreen","interactiveChoice","generic-toast","mediaEntry","report-error","video-controller-ready"];window.addEventListener("message",t=>{const{data:r={}}=t,{action:s,name:a}=r;if(a&&s&&n.includes(a)){if(r.videoSelector=e,o.includes(s))return injectScript(`\n            window.handleDRMRequest(${JSON.stringify(r)}).then(() => {}).catch((err) => console.error(err))\n          `);switch(s){case"get-fullscreen-state":event.source.postMessage({action:"fullscreen-changed",isFullscreen:screenfull.isFullscreen},"*")}}}),injectScript(`\n        const tag = '[videoshare-drm:${e}]'\n        const component = window['${e}'].$refs.element\n\n        function getIframe () {\n          return component.$refs.iframe\n        }\n        window['${e}Iframe'] = component.$refs.iframe\n\n        async function informIframe (action, data = {}, expectResponse = false) {\n          const response = await window.twoseven.postTo(getIframe().contentWindow, {\n            action,\n            ...JSON.parse(JSON.stringify(data))\n          }, expectResponse)\n          if (expectResponse) {\n            return response.result\n          }\n          return response\n        }\n\n        screenfull.on('change', () => {\n          if (app.$store.getters.currentSelector === '${e}') {\n            const { isFullscreen } = screenfull\n            informIframe('fullscreen-changed', {\n              isFullscreen\n            })\n          }\n        })\n\n        function postAndExpect (action, data) {\n          return informIframe(action, data, true)\n        }\n\n        component.plyr = {\n          elements: {\n            container: component.$el.querySelector('.iframe-container')\n          },\n          get currentTime () {\n            const self = this\n            return (function () { return postAndExpect('currentTime') })()\n          },\n          get duration () {\n            const self = this\n            return (function () { return postAndExpect('duration') })()\n          },\n          get source () {\n            const self = this\n            return (function () { return postAndExpect('source') })()\n          },\n          seek (position) {\n            const controller = Videoshare.videoControls['${e}']\n            controller.seek(position)\n          }\n        }\n\n        // When any of these functions are called, we need to inform the iframe to execute it\n        // on our behalf\n        var videoControls = {\n          videoSelector: '${e}',\n          component,\n          async play (json) {\n            return postAndExpect('play', json)\n          },\n          async pause (json) {\n            return postAndExpect('pause', json)\n          },\n          async seek (position) {\n            twosevenExtLog(tag, 'Seeking to position: ' + position)\n            return postAndExpect('seek', {position})\n          },\n          async sourceChange (json) {\n            try {\n              appBus.$emit('sourceChange', json)\n            } catch (e) {}\n            return informIframe('sourceChange', json)\n          },\n          currentTime () {\n            return postAndExpect('currentTime')\n          },\n          duration () {\n            return postAndExpect('duration')\n          },\n          getSource () {\n            return postAndExpect('source')\n          },\n          async interactiveChoice (json) {\n            return informIframe('interactiveChoice', json)\n          },\n          async updateMediaEntry (json) {\n            Object.assign(component.mediaEntry, json)\n          }\n        }\n        Videoshare.registerVideoControls(videoControls, '${e}')\n\n        window.appBus.$on('load-${e}-video', newMedia => {\n          const result = Videoshare.onSourceChange('${e}', newMedia)\n          // Same as earlier video. Do a local source change instead\n          if (!result) {\n            Videoshare.doSourceChange({\n              videoSelector,\n              newMedia\n            })\n          }\n        })\n      `)}injectScript("\n      const twosevenEvents = Videoshare.getEvents()\n      window.handleDRMRequest = async function ({ videoSelector, action, json, ack }) {\n        const parent = window[videoSelector]\n        const component = parent.$refs.element\n\n        function informIframe (action, data = {}) {\n          component.$refs.iframe.contentWindow.postMessage({\n            action,\n            ...JSON.parse(JSON.stringify(data))\n          }, '*')\n        }\n        // Now, set up the fake plyr object\n        try {\n          switch (action) {\n            case 'play':\n              await Videoshare.onPlay(null, component, json)\n              break\n            case 'pause':\n              await Videoshare.onPause(null, component, json)\n              break\n            case 'seek':\n              await Videoshare.onSeek(json.position, component)\n              break\n            case 'sourceChange':\n              json.videoSelector = videoSelector\n              await Videoshare.onSourceChange(videoSelector, json)\n              break\n            case 'fullscreen':\n              component.$emit('request-toggle-fullscreen')\n              break\n            case 'generic-toast':\n              triggerEvent(window, 'ext-event', {\n                action: 'generic-toast',\n                ...json\n              })\n              break\n            case 'interactiveChoice':\n              await Videoshare.onInteractiveChoice(null, component, json)\n              break\n            case 'mediaEntry':\n              const { mediaEntry } = component\n              informIframe(ack.event, { json: JSON.parse(JSON.stringify(mediaEntry)) })\n              break\n            case 'report-error':\n              triggerEvent(window, 'report-error', {\n                ...json,\n                videoSelector\n              })\n              break\n            case 'video-controller-ready': {\n              const { videoSelector } = json\n              window[videoSelector].$emit('plyr-ready')\n              break\n            }\n          }\n        } catch (e) {\n          console.error(e)\n        }\n      }\n    "),e("netflix",["_nflx","netflix-iframe"]),e("amazon","amazon-iframe"),e("hbo","hbo-iframe"),e("webpage",["webpage-iframe","webpage-iframe:inner"]),e("hulu","hulu-iframe"),e("disneyplus","disneyplus-iframe"),e("headspace","headspace-iframe")}),twosevenExtLog("videoshare-drm","Set up twoseven-app-ready listener"),window.addEventListener("report-error",async e=>{const{detail:{data:n}}=e;let o;try{o=browser.runtime.getManifest().version}catch(e){}Object.assign(n,{version:o});try{await axios.post("/ext/error",n)}catch(e){console.error(e)}});