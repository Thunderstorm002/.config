(()=>{const e="https://prod-static.disney-plus.net/us-east-1/builds/83dc4948658b65d35a11e538cf96021ec4078942_1598578038839/scripts/playerADK.js",n=new ScriptModifierMap([{key:new XRegExp('(?<fnstart>return{id:"(Bam|Dss)HlsMediaClientBus".*?get player\\(\\){return (?<player>\\var)}})'),value:new ScriptModifierEntry({replace:"\n        ;(function () {\n          this.on('MANIFEST_PARSED', () => {\n            let isReadyPromise\n            // The first play does not come via this.play(). So, we set up an event listener on the <video> element\n            if (window.twoseven.ignoreFirstPlay) {\n              isReadyPromise = new Promise((resolve) => {\n                window.twoseven.once(this.media, 'play', () => {\n                  window.twoseven.ignoreFirstPlay = false\n                  setTimeout(() => {\n                    this.media.pause()\n                    resolve()\n                  }, 0)\n                })\n              })\n            } else {\n              // Nothing to wait for. Just create a resolved promise\n              isReadyPromise = Promise.resolve()\n            }\n            isReadyPromise.then(() => {\n              triggerEvent(window, 'controller-event', { action: 'video-ready' })\n            })\n          })\n          window.twoseven.videoController = {\n            play: this.play.bind(this),\n            pause: this.pause.bind(this),\n            seek: this.seek.bind(this)\n          }\n          this.play = async (...args) => {\n            return triggerEvent(window, 'controller-event', { action: 'play' })\n          }\n          this.pause = async (...args) => {\n            return triggerEvent(window, 'controller-event', { action: 'pause' })\n          }\n          this.seek = async (position, dummy, fromJS) => {\n            if (window.twoseven.ignoreFirstSeek) {\n              window.twoseven.ignoreFirstSeek = false\n              return\n            }\n            return triggerEvent(window, 'controller-event', { action: 'seek', position })\n          }\n        }.bind(${player}))()\n        ${fnstart}\n        "})},{key:new XRegExp("(?<fnstart>onEnterFullscreen:function\\(\\)\\{)"),value:new ScriptModifierEntry({replace:"${fnstart}\n          triggerEvent(window, 'controller-event', { action: 'fullscreen' })\n        "})},{key:new XRegExp("(?<fnstart>onExitFullscreen:function\\(\\)\\{)"),value:new ScriptModifierEntry({replace:"${fnstart}\n          triggerEvent(window, 'controller-event', { action: 'fullscreen' })\n        "})},{key:new XRegExp("(?<fnstart>[a-zA-Z0-9+])=(?<fncontent>document.fullscreenEnabled)"),value:new ScriptModifierEntry({replace:"${fnstart}=true||${fncontent}"})},{key:new XRegExp("return (?<var1>[a-zA-Z0-9]+)\\?function\\((?<var2>[a-zA-Z0-9]+)\\)\\{return [a-zA-Z0-9]+\\[[a-zA-Z0-9]+\\]\\(\\)\\}:function\\(\\)\\{\\}"),value:new ScriptModifierEntry({replace:"return () => { triggerEvent(window, 'controller-event', { action: 'fullscreen' }) }"})}],"disney+:playerADK");try{module&&(module.exports={replaceMap:n,replaceURL:e})}catch(e){}try{window.twoseven.disneyPlusReplaceMap=n,window.twoseven.disneyPlusReplaceURL=e}catch(e){}})();