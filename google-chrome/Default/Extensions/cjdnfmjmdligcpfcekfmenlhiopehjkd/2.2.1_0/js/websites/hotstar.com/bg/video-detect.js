(async()=>{let e;const t=new Deferred;let n;const a=new Deferred;let o;const s=new Deferred;browser.runtime.onConnect.addListener(e=>{"watch-iframe[hotstar]"===e.name&&e.onMessage.addListener(async t=>{const{action:n}=t;switch(n){case"get-country-code":{const t=await async function(e=!0){if(t||await s,!e&&t)return t;const n=await fetch(o),a=await n.text(),r=JSON.parse(a).find(e=>e.startsWith("COUNTRY_")).split("COUNTRY_")[1];return t=r,r}();e.postMessage({action:"get-country-code",data:{countryCode:t}});break}}})});const r=["requestHeaders"];is.chrome(">=72")&&r.push("extraHeaders"),browser.webRequest.onSendHeaders.addListener(e=>{const{requestHeaders:t}=e,o={};t.forEach(e=>{const{name:t,value:n}=e;o[t]=n}),n=o,a.resolve()},{urls:["https://api.hotstar.com/*/episode/detail*"]},r),browser.webRequest.onBeforeSendHeaders.addListener(async t=>{const o=getHeaderValue("x-country-code",t.requestHeaders);o&&(e=o),getHeaderValue("hotstarauth",t.requestHeaders)&&(n=webRequestHeadersToObject(t.requestHeaders),a.resolve())},{urls:["https://api.hotstar.com/*"]},r),browser.webRequest.onBeforeSendHeaders.addListener(async o=>{const{url:s,tabId:r,frameId:i}=o,d=new URI(s).filename(),c=await async function(o,s,r,i){let d;i||(await a,i=n),e||await t,d=0!==r?await getTwoSevenTabIframeURL(s,r):tabURLs[s];const c=new URI(d),l=c.path().split("/"),h=["",e.toLowerCase(),...l.slice(2)].join("/");c.path(h);const u=c.toString(),w=await axios.get(`https://api.hotstar.com/o/v1/multi/get/m/content?ids=${o}`,{headers:{"x-platform-code":i["x-platform-code"]||"PCTV","x-client-code":i["x-client-code"]||"LR","x-country-code":i["x-country-code"]||e.toUpperCase(),hotstarauth:i.hotstarauth}}),{data:{body:{results:{map:{[o]:p}}}}}=w,{avsContentId:m,genre:f,showName:g,title:b,seasonNo:R,episodeNo:v,images:{h:U}}=p;let y,L=b;g&&(L=`${g} - ${b}`),U&&(y=`https://img1.hotstarext.com/image/upload/f_auto,t_web_hs_3x/${U}`);const I=new URL(u).origin;return{videoSelector:"webpage",videoURL:u,videoData:{title:L,poster:y,referer:u,origin:I,avsContentId:m,genre:f,showName:g,seasonNo:R,episodeNo:v},origin:I,referer:u,strategies:null,headers:[],listenerEventsID:uuid()}}(d,r,i),{listenerEventsID:l}=c;0===i&&browser.tabs.executeScript(r,{frameId:i,code:`window.addEventListener('after-tab-media-fetch:${l}', (e) => {\n          let { detail } = e\n          detail = JSON.parse(detail)\n          const { data: { mediaEntry } } = detail\n          const { videoURL } = mediaEntry\n\n          let finalURL\n\n          const uri = new URI(videoURL)\n          const path = uri.path()\n          // Remove two entries from the path\n          const components = path.split('/')\n          const newPath = components.slice(0, components.length - 2).join('/')\n          // If the last part of this is a number, then we're good (at least for most TV shows). Otherwise, just head to host + components[:2].join('/')\n          let newURI = new URI(videoURL).path(newPath)\n          if (Number.isNaN(Number(newURI.filename()))) {\n            // Not a valid path\n            finalURL = new URI(videoURL).path(components.slice(0, 2).join('/')).toString()\n          } else {\n            // Probably a valid path\n            finalURL = newURI.toString()\n          }\n          window.location.href = finalURL\n        })`}),addTabMedia(r,i,c),0!==i&&twosevenTabs[r]&&browser.tabs.executeScript(r,{frameId:i,code:`triggerEvent(window, 'controller-event', JSON.stringify({\n          data: {\n            action: 'sourceChange',\n            mediaEntry: ${JSON.stringify(c)}\n          }\n        }), true)`})},{urls:["https://api.hotstar.com/play/v2/playback/content/*"]},r),browser.webRequest.onBeforeSendHeaders.addListener(async e=>{o=e.url,s.resolve()},{urls:["https://service.hotstar.com/useg/production/getusersegment*"]})})();