class BaseModule{constructor(e){const t=new Emittery;this.emittery=t,["on","off","once","onAny","emit","emitSerial"].forEach(e=>{this[e]=t[e].bind(t)}),Object.assign(this,e),this.isFullscreen=!1}check(e){const{hrefURLRegex:t}=this;return t.test(e)}earlyInitialize(){twosevenExtLog(`[module]:[${this.name}]`,"WARNING: No earlyInitialize()")}initialize(){}requestFullscreen(){this.fullscreenCallback()&&(()=>{const{name:e}=this;postToParent({action:"fullscreen",name:e})})()}getVideoElementPostWindow(){return window.parent}getResponseWindow(){return window.parent}isValidVideoElement(){return!0}videoSelector(){return"webpage"}doVideoURLsMatch(e,t){return e.videoURL===t.videoURL}useBodyObserver(){return!0}getMediaElement(){return this.mediaElement||this.video&&this.video.video||this.plyr&&this.plyr.video||document.querySelector("video")||document.querySelector("audio")}}class WebpageIframeModule extends BaseModule{check(e){return!e.includes("ts-generic-fallback=1")&&super.check(e)}}(()=>{class e{constructor(){this.data={},this.fallback={}}modules(){return[...Object.values(this.data),...Object.values(this.fallback)]}}const t=new e,i=new e;function n(e,t,i){i?t.fallback[e.name]=e:t.data[e.name]=e}async function o(e,t){const i=t.modules();for(const t of i){if(await t.check(e))return t}}window.registerWebpageIframeModule=((e,i=!1)=>n(e,t,i)),window.getMatchingWebpageIframeModule=(e=>o(e,t)),window.registerGenericFallbackModule=((e,t=!1)=>n(e,i,t)),window.getMatchingGenericFallbackModule=(e=>o(e,i))})();