(()=>{const e="watch-iframe[hotstar]",n=e;async function t(e,n={}){const{result:t}=await postTo(window,{action:"player-cmd",drmIgnore:!0,cmd:e,...n},!0);return t}const o=new WebpageIframeModule({name:e,hrefURLRegex:new RegExp("https://(.*\\.)?hotstar.com/.*"),earlyInitialize(){const t=browser.runtime.connect({name:e});if(this.port=t,this.countryCodePromise=new Deferred,(async()=>{t.onMessage.addListener(e=>{const{action:n,data:t}=e;switch(n){case"get-country-code":{const{countryCode:e}=t;e&&this.countryCodePromise.resolve(e.toLowerCase());break}}}),t.postMessage({action:"get-country-code"});const e=await this.countryCodePromise;if(this.getCountryCodeFromURL(window.location.href)!==e){const n=new URI(window.location.href),t=n.path().split("/");t[1]=e;const o=n.path(t.join("/"));o!==n.toString()&&(window.location.href=o)}})(),window.twoseven.is.chrome()){once(window,"modify-hsplayer-url",async e=>{const{detail:t}=e,o=new URI(t);o.addSearch({"ts-bypass":1,"ts-uuid":Date.now()});const r=await pullScriptAndModify(o.toString(),window.twoseven.hotstarHSPlayerReplaceMap,n),i=URL.createObjectURL(new Blob([r],{type:"application/javascript"}));triggerEvent(window,"hsplayer-url",i,!0)});const e=new RegExp("https://www.hotstar.com/assets/main\\..*\\.js");(async()=>{const n=await waitForDOMNode({type:"check",value:n=>n.href&&e.test(n.href)});n.parentNode.removeChild(n)})(),(async()=>{const t=await waitForDOMNode({type:"check",value:n=>n.src&&e.test(n.src)});t.parentNode.removeChild(t);const{src:o}=t,r=new URI(o);r.addSearch({"ts-bypass":1,"ts-uuid":Date.now()});const i=await pullScriptAndModify(r.toString(),window.twoseven.hotstarMainReplaceMap,n);injectScript(i,!1,"main-modified")})()}this.onFullscreenBtnClick=(()=>{postToParent({action:"fullscreen",name:name})}),injectScript("\n        function getActiveController () {\n          const controllers = window.twoseven.__controllers\n          for (const controller of controllers) {\n            const video = controller.getMediaElement()\n            const rect = video.getBoundingClientRect()\n            if (rect.width > 0 && rect.height > 0) {\n              return controller\n            }\n          }\n        }\n\n        if (!window.twoseven.videoController) {\n          window.twoseven.videoController = {\n            play (...args) {\n              const controller = getActiveController()\n              return controller.playback.play(...args)\n            },\n            pause (...args) {\n              const controller = getActiveController()\n              return controller.playback.pause(...args)\n            },\n            currentTime (...args) {\n              const controller = getActiveController()\n              return controller.playback.currentTime(...args)\n            },\n            getDuration () {\n              const controller = getActiveController()\n              return controller.playback.getDuration()\n            }\n          }\n        }\n\n        window.addEventListener('message', async ({ data = {} }) => {\n          if (data.action !== 'player-cmd') {\n            return\n          }\n          const { cmd, ack, fromJS } = data\n          let result\n          switch (cmd) {\n            case 'play':\n              await window.twoseven.videoController.play(fromJS)\n              break\n            case 'pause':\n              await window.twoseven.videoController.pause(fromJS)\n              break\n            case 'currentTime':\n              result = window.twoseven.videoController.currentTime()\n              break\n            case 'seek':\n              const { position } = data\n              await window.twoseven.videoController.currentTime(position / 1e3, fromJS)\n              break\n            case 'duration':\n              result = window.twoseven.videoController.getDuration()\n              break\n            case 'status':\n              result = getActiveController().getMediaElement().paused ? 'paused' : 'playing'\n              break\n          }\n          if (ack) {\n            window.postMessage({\n              action: ack.event,\n              drmIgnore: true,\n              json: { result }\n            }, '*')\n          }\n        })\n      "),window.addEventListener("controller-event",e=>{let{detail:n}=e;"string"==typeof n&&(n=JSON.parse(n));const{data:t}=n,{action:o}=t;switch(o){case"controller-changed":{const{idx:e}=t;injectScript(`\n              const controller = window.twoseven.__controllers[${e}]\n              const { playback } = controller\n              let { play, pause, currentTime } = playback\n              if (playback.__play) {\n                // Already modified\n                return\n              }\n              play = play.bind(playback)\n              pause = pause.bind(playback)\n              currentTime = currentTime.bind(playback)\n              Object.assign(playback, {\n                __play: play,\n                __pause: pause,\n                __currentTime: currentTime,\n                play (fromJS) {\n                  fromJS = fromJS || !window.twoseven.controllerInitialized // If the controller is not ready, just pretend like it's coming from JS\n                  if (fromJS) {\n                    return play()\n                  }\n                  const position = currentTime.bind(playback)()\n                  twoseven.postToParent({\n                    action: 'play',\n                    name,\n                    json: {\n                      position: position * 1e3\n                    }\n                  })\n                  return new Promise(resolve => resolve())\n                },\n                pause (fromJS) {\n                  fromJS = fromJS || !window.twoseven.controllerInitialized // If the controller is not ready, just pretend like it's coming from JS\n                  if (fromJS) {\n                    return pause()\n                  }\n                  const position = currentTime.bind(playback)()\n                  twoseven.postToParent({\n                    action: 'pause',\n                    name,\n                    json: {\n                      position: position * 1e3\n                    }\n                  })\n                  return new Promise(resolve => resolve())\n                },\n                currentTime (position, fromJS) {\n                  fromJS = fromJS || !window.twoseven.controllerInitialized // If the controller is not ready, just pretend like it's coming from JS\n                  if (!position || fromJS) {\n                    return currentTime(position)\n                  }\n                  // This is a seek operation\n                  twoseven.postToParent({\n                    action: 'seek',\n                    name,\n                    json: {\n                      position: position * 1e3\n                    }\n                  })\n                }\n              })\n            `);break}case"sourceChange":{const{data:{mediaEntry:e}}=n;if(this.lastMediaEntry&&this.lastMediaEntry.videoURL===e.videoURL)return;this.lastMediaEntry=e,this.emit("controller-ready",e);break}}})},initialize(){},fullscreenCallback:()=>!0,getActions:()=>({play:()=>t("play",{fromJS:!0}),pause:()=>t("pause",{fromJS:!0}),async seek({position:e}){const n=await t("currentTime");if(!(Math.abs(e-1e3*n)<100))return t("seek",{position:e,fromJS:!0})},sourceChange(e){},currentTime:()=>t("currentTime"),duration:()=>t("duration"),source(){return this.videoURL},playerStatus:()=>t("status"),interactiveChoice(e){}}),getVideo(){return this.plyr},isValidVideoElement(e){const n=e.getBoundingClientRect();if(!this.video&&n.width>0&&n.height>0)return!0},async onVideo(e,n){this.plyr=e,Object.assign(e,{async play(e){if(e)return t("play",{fromJS:e});{const e=await t("currentTime");postToParent({action:"play",name:name,json:{position:1e3*e}})}},async pause(e){if(e)return t("pause",{fromJS:e});{const e=await t("currentTime");postToParent({action:"pause",name:name,json:{position:1e3*e}})}},async seek(e,n){n?t("seek",{position:e,fromJS:n}):postToParent({action:"seek",name:name,json:{position:e}})}}),Object.defineProperty(e,"currentTime",{get:function(){return e.video.currentTime}}),this.video=n,this.videoURL=window.location.href,this.once("same-url").then(async()=>{const{plyr:{video:e}}=this;await new Promise(n=>{let t=0;e.addEventListener("timeupdate",function o(){t++,!e.paused&&t>3&&(setTimeout(()=>e.pause(),0),e.currentTime=0,e.removeEventListener("timeupdate",o),n())})});const n=document.querySelector(".fullscreen.player-control");n&&(n.removeEventListener("click",this.onFullscreenBtnClick),n.addEventListener("click",this.onFullscreenBtnClick)),this.emit("controller-initialized"),injectScript("window.twoseven.controllerInitialized = true;")})},getCountryCodeFromURL:e=>new URI(e).path().split("/")[1],doVideoURLsMatch(e,n){const{videoURL:t}=e,{videoURL:o}=n;try{const e=new URI(t),n=new URI(o),r=e.path().split("/"),i=n.path().split("/");return r.slice(r.length-2).join("/")===i.slice(i.length-2).join("/")}catch(e){return t===o}},videoSelector:()=>"webpage"});registerWebpageIframeModule(o)})();