!function(){var e="twoseven.xyz-communicator";injectScriptByURL(browser.extension.getURL("js/redist/debounce.umd.js"));const t=browser.runtime.connect({name:e});t.name=e,t.onMessage.addListener(e=>{}),twosevenExtLog("base-cs","Attempting to register app-ready listener"),window.addEventListener("ext:is-room",e=>{const{data:n}=e.detail,{isRoom:o,reason:a}=n,s=o?"join-room-page":"leave-room-page",{location:{origin:r}}=window;var i=Object.assign(n,{type:s,origin:r});if(twosevenExtLog("base-cs",`Updating twoseven tab. reason=${a}`),postMessageToPort(t,i),o){if(document.querySelector("#twoseven-room-watcher-script"))return;injectScript("\n        const keys = ['roomType', 'roomOwner', 'roomController', 'roomProperties']\n        keys.forEach(key => {\n          const fn = (state) => {\n            return state['room'][key]\n          }\n          app.$store.watch(fn, newVal => { triggerEvent(window, 'room-updated', { key, value: newVal }) }, { deep: true })\n        })\n\n        function getRoomInfo () {\n          const result = {}\n          keys.forEach(key => {\n            const value = app.$store.getters[key]\n            result[key] = value\n          })\n          return result\n        }\n\n        window.addEventListener('get-room-info', () => {\n          const result = getRoomInfo()\n          triggerEvent(window, 'get-room-info-result', JSON.stringify(result))\n        })\n        window.addEventListener('message', async (e) => {\n          const { data = {} } = e\n          const { action } = data\n          if (action !== 'get-room-info') {\n            return\n          }\n          const result = getRoomInfo()\n          const { ack = {} } = data\n          const { event } = ack\n          if (event) {\n            try {\n              await window.twoseven.postTo(e.source, {\n                action: event,\n                name,\n                result\n              })\n            } catch (e) {\n            }\n          }\n        })\n      ",!1,"twoseven-room-watcher-script"),window.addEventListener("room-updated",e=>{const{detail:{data:n}}=e;t.postMessage({action:"room-updated",data:n})})}}),window.addEventListener("ext:sourceChange",e=>{const{data:n}=e.detail;postMessageToPort(t,{type:"sourceChange",data:n})}),window.addEventListener("message",async e=>{const{data:t={},source:n}=e,{action:o}=t;if(o)switch(o){case"get-room-info":{const{ack:{event:o}}=t,a=new Promise(e=>window.addEventListener("get-room-info-result",({detail:{data:t}})=>{const n=JSON.parse(t);e(n)}));triggerEvent(window,"get-room-info");const s={action:o,json:await a};try{await postTo(n,s)}catch(e){}break}}}),document.addEventListener("ext:getClientID",async e=>{const{detail:{data:n}}=e,{__responseEvent:o}=n,a=await getClientIDViaPort(t);injectScript(`appBus.$emit('${o}', '${a}')`)}),document.addEventListener("ext:getSettings",async e=>{const{detail:{data:n}}=e,{__responseEvent:o}=n,a=await getSettingsViaPort(t);injectScript(`appBus.$emit('${o}', ${JSON.stringify(a)})`)})}();