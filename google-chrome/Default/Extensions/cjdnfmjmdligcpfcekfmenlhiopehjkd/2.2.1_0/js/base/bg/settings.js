const SETTINGS=defaultSettings.keys,allSettingsKeys=SETTINGS.getAllKeys(),settingsReady=new Deferred;function getGroupSettings(t){Array.isArray(t)||"object"!=typeof t||(t=Object.values(t));const e={};for(const s of t)e[s]=settings[s];return e}function dumpSettings(){const t={};for(const e of allSettingsKeys)t[e]=settings[e];return t}async function dumpStorage(){const t={};for(const e of allSettingsKeys){const s=(await PolyfilledStorage.local.get([e]))[e];t[e]=s}return t}browser.runtime.onMessage.addListener(t=>{"open-settings"===t.action&&browser.runtime.openOptionsPage()}),browser.runtime.onConnect.addListener(t=>{t.onMessage.addListener(async e=>{const{action:s}=e,{name:n}=t;switch(s){case"get-settings":t.postMessage({action:"get-settings",name:n,settings:JSON.parse(JSON.stringify(settings)),keys:JSON.parse(JSON.stringify(SETTINGS))})}})});const settings=new ProxyObject({},"settings",{ignoreSymbols:!0});function updateSettings(t){const{target:e,from:s,strategy:n,updateStorage:o=!0}=t;if(!e||!s||!n)throw new Error("Must specify 'target', 'from' and 'strategy' when updating settings");let i;switch(s.src){case"default":i=dotProp.get(defaultSettings.defaults,s.key);break;case"inline":i=s.value}const a=dotProp.get(settings,e),r=a instanceof Array&&i instanceof Array,g=!r&&a instanceof Object&&i instanceof Object;switch(n){case"overwrite":dotProp.set(settings,e,i);break;case"merge":if(!g&&!r)throw new Error(`Cannot use 'merge' strategy on target=${e} from=${JSON.stringify(s)} orig=${a} new=${i}`);r?dotProp.set(settings,e,[...new Set([...a,...i])]):g&&Object.assign(a,i)}if(o)return PolyfilledStorage.local.set({[e]:JSON.parse(JSON.stringify(settings[e]))})}window.settings=settings,settings.on("change",window.twoseven.debounce(function(t){const e=twosevenTabsLRUCache.keys();for(const t of e)browser.tabs.executeScript(t,{code:`injectScript(\`appBus.$emit('ext:settingsChanged', ${JSON.stringify(settings)})\`)`})},100)),browser.runtime.onConnect.addListener(t=>{t.onMessage.addListener(e=>{try{const{action:s}=e;if(!s||"get-settings"!==s)return;t.postMessage({action:"get-settings",data:JSON.parse(JSON.stringify(settings))})}catch(t){}})}),(async()=>{const t="[settings]";PolyfilledStorage.local.onChanged.addListener((e,s)=>{for(const s of Object.keys(e)){const{newValue:n}=e[s];settings[s]=n,twosevenExtLog(t,`Storage settings  changed. key=${s} value=${n}`)}});for(const t of allSettingsKeys){void 0===(await PolyfilledStorage.local.get([t]))[t]&&await PolyfilledStorage.local.set({[t]:defaultSettings.defaults[t]})}for(const e of allSettingsKeys){const s=defaultSettings.defaults[e];let n=!1;try{if(settings[e]=(await PolyfilledStorage.local.get([e]))[e],twosevenExtLog(t,`Loaded setting from storage: ${e}=${settings[e]}`),!Array.isArray(settings[e])&&settings[e]instanceof Object)for(const t of Object.keys(s))if(settings[e][t]=void 0===settings[e][t]?s[t]:settings[e][t],settings[e][t]instanceof Array){const s=Array.from(new Set(settings[e][t]));settings[e][t].length>s.length&&(settings[e][t]=s,n=!0)}}catch(t){settings[e]=s}n&&await PolyfilledStorage.local.set({[e]:settings[e]})}settingsReady.resolve()})();