window.twoseven.crGetLanguageAndCountry=(n=>{const e=n.substring(0,2).toLowerCase(),t=n.substring(2,4).toUpperCase();return{language:{en:"English",de:"Deutsch",es:"Español",it:"Italiano",ja:"日本語",fr:"Français",pt:"Português",ar:"العربية",ru:"Русский",kr:"한국어"}[e],country:{BR:"Brasil",DE:"Germany",ES:"España",FR:"France",IT:"Italy",JP:"Japan",LA:"América Latina",UK:"United Kingdom",US:"America"}[t]}}),injectScript(`window.twoseven.crGetLanguageAndCountry = ${window.twoseven.crGetLanguageAndCountry.toString()}`),registerModule("crunchyroll",{async loadMedia(n){const{videoData:e}=n,{episode:t,module:a}=e,{addHeaders:s,useLocalURL:r}=a;try{window.episode=t;const e={type:"video",sources:[{src:"",type:"video/mp4"}],tracks:[]};let a=n.videoURL;if(r)try{const n=t.config.streams.filter(n=>"adaptive_hls"===n.format);n.length>0&&(a=n.find(n=>null===n.hardsub_lang).url)}catch(n){}injectScript(`\n          const component = web.$refs.element\n          component.plyr.source = ${JSON.stringify(e)}\n          component.playHLSStream('${a}', component.$el.querySelector('video'), ${s?JSON.stringify(n.videoData.headers):void 0})\n        `)}catch(n){console.error(n)}},async afterMediaLoad(n){injectScript("\n        const component = web.$refs.element\n        ;(async function () {\n          const promises = [\n            new Promise(resolve => component.plyr.once('progress', resolve)),\n            new Promise(resolve => component.plyr.once('loadeddata', resolve))\n          ]\n          await Promise.all(promises)\n          const { mediaEntry } = this\n          const { videoData: { episode, module } } = mediaEntry\n          const { settings = {} } = module\n          const { forceHardSub = false } = settings\n\n          if (forceHardSub) {\n            twosevenExtLog('modules:crunchyroll:cs', 'Forcing hardsub')\n          }\n\n          const { config: { streams } } = episode\n          const hlsStreams = streams.filter(x => x.format === 'adaptive_hls')\n          if (hlsStreams.length === 0) {\n            // Add streams from the videoData we received\n            hlsStreams.push(...(mediaEntry.videoData.streams || []))\n          }\n          if (forceHardSub || episode.subtitles.length === 0) {\n            const fakeVTT = `WEBVTT\n\n00:00.001 --\x3e 00:00.002\n`\n            for (const stream of hlsStreams) {\n              const { audio_lang: audioLang, hardsub_lang: hardsubLang } = stream\n              if (!hardsubLang) {\n                continue\n              }\n              try {\n                if (audioLang) {\n                  const { language, country } = window.twoseven.crGetLanguageAndCountry(audioLang)\n                  Object.assign(stream, {\n                    audio: {\n                      language,\n                      country\n                    }\n                  })\n                }\n              } catch (e) {\n              }\n              try {\n                if (hardsubLang) {\n                  const { language, country } = window.twoseven.crGetLanguageAndCountry(hardsubLang)\n                  Object.assign(stream, {\n                    hardsub: {\n                      language,\n                      country\n                    }\n                  })\n                }\n              } catch (e) {\n              }\n              const { hardsub } = stream\n              const srclang = hardsubLang.substring(0, 2)\n              let label = srclang\n              if (hardsub) {\n                label = hardsub.language\n                if (hardsub.country) {\n                  label += ' ' + hardsub.country\n                }\n              }\n              const vtt = fakeVTT + srclang + '\\n'\n              const track = {\n                text: vtt,\n                kind: 'captions',\n                format: 'vtt',\n                label,\n                srclang\n              }\n              this.addCaptions(track)\n            }\n            // Now, set up listeners to change the stream when a languagechange event occurs\n            const switchStream = (plyr, stream) => {\n              if (plyr.hls && plyr.hls.url === stream.url) {\n              // We're on the right stream\n                return\n              }\n              const playing = !plyr.media.paused\n              const position = plyr.media.currentTime\n              const start = Date.now()\n              plyr.once('loadeddata', () => {\n                if (playing) {\n                  const now = Date.now()\n                  const diff = now - start\n                  plyr.media.currentTime = position + (diff / 1e3)\n                  plyr.once('timeupdate', () => {\n                  // Do a resync\n                    this.$emit('resync-media')\n                  })\n                  plyr.media.play()\n                }\n              })\n              this.playHLSStream(stream.url, this.$el.querySelector('video'), this.mediaEntry.videoData.headers)\n              plyr.stream = stream\n            }\n            const onLanguageChange = window.twoseven.debounce((data) => { // eslint-disable-line\n              const { detail: { plyr } } = data\n              const { captions: { language, toggled } } = plyr\n              if (!toggled) {\n                return\n              }\n              const stream = hlsStreams.find(stream => (stream.hardsub_lang || '').startsWith(language))\n              stream && switchStream(plyr, stream)\n            }, 300)\n\n            const onCaptionsDisabled = window.twoseven.debounce((data) => {\n              const { detail: { plyr } } = data\n              const stream = hlsStreams.find(stream => stream.hardsub_lang === null)\n              stream && switchStream(plyr, stream)\n            }, 300)\n\n            this.plyr.on('languagechange', onLanguageChange)\n            this.plyr.on('captionsenabled', onLanguageChange)\n            this.plyr.on('captionsdisabled', onCaptionsDisabled)\n            const unwatch = this.$watch('mediaEntry.videoURL', () => {\n              this.plyr.off('languagechange', onLanguageChange)\n              this.plyr.off('captionsenabled', onLanguageChange)\n              this.plyr.off('captionsdisabled', onCaptionsDisabled)\n              unwatch()\n            })\n          } else {\n            const subtitles = []\n            for (const entry of episode.subtitles) {\n              let { url: vttSrc, vtt, label, language, kind = 'captions', vttReplaceLines } = entry\n              if (vttSrc) {\n                const response = await fetch(vttSrc)\n                vtt = await response.text()\n                // Remove the first two lines\n                if (vttReplaceLines) {\n                  const vttLines = vtt.split(`\r\n`)\n                  vtt = `WEBVTT\n` + vttLines.slice(vttReplaceLines).join(`\r\n`)\n                }\n              }\n              subtitles.push({\n                text: vtt,\n                kind: 'captions',\n                format: 'vtt',\n                label,\n                srclang: language\n              })\n            }\n            this.addCaptions(subtitles)\n          }\n        }.bind(component))()\n      ")}});