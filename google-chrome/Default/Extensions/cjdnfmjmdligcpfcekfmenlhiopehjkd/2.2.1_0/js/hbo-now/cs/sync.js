!function(){const e="[hbo-sync]";let n=!1;if(window.top===window&&SKIP_ON_HBO)return void twosevenExtLog(e,"Skipping extension logic");window.twoseven.is.chrome()&&(async()=>{const n="ts-hbo-reload";sessionStorage.getItem(n)||(sessionStorage.setItem(n,1),(async()=>{await sendMessageToBG("clear-cache",{url:window.location.href,origins:["https://play.hbonow.com","https://play.hbogo.com","https://play.hbomax.com"]}),twosevenExtLog(e,"Reloading once after clearing cache"),window.location.reload()})())})();let t,o,r={},i=!1;const s=browser.runtime.connect({name:name}),a=new Deferred;function l(){return document.getElementsByTagName("video")[0]}function c(){return window.location.origin+window.location.pathname}async function d(){return await postTo(window,{action:"hbo-controller-position"},!0)}once(window,"hbo:controller-injected",()=>{a.resolve()}),window.addEventListener("next-item",async e=>{const{detail:{data:{videoURL:n}}}=e;window.location.href.includes(n)||s.postMessage({action:"get-video-metadata",json:{url:n}})}),s.onMessage.addListener(async s=>{Object.assign(s,{name:name});let p=!0;switch(s.action){case"sourceChange":{if(!s.json)return;const{json:w}=s;if(t&&t.startsWith(w.videoURL)&&!this.videoID)return;{s.json.videoURL.includes("hbomax")&&(i=!0),t=window.location.href,await a;const{videoData:{videoID:p}}=w;if(this.videoID&&p===this.videoID)return;this.videoID=p,r=function(){async function t(e){const n=await d();postToParent({action:e,name:name,json:{position:1e3*n}})}injectScript("window.skipFirstPlayPause = true"),Object.assign(r,{play(){injectScript(`\n          try {\n            twoseven.hboVideoController.play(true)\n          } catch (e) {\n            twoseven.reportError('${e}', e, '[actions]: Failed to play')\n          }`,!0)},pause(){injectScript(`\n          try {\n            twoseven.hboVideoController.pause(true)\n          } catch (e) {\n            twoseven.reportError('${e}', e, '[actions]: Failed to pause')\n          }`,!0)},seek({position:n}){injectScript(`\n          try {\n            twoseven.hboVideoController.seek(${n})\n          } catch (e) {\n            twoseven.reportError('${e}', e, '[actions]: Failed to seek')\n          }\n        `,!0)},currentTime:()=>d(),duration:()=>(async function(){return await postTo(window,{action:"hbo-controller-duration"},!0)})(),source:()=>c()}),injectScript("\n      var c = console.log\n      console.log = function(args) {\n        c('hbo-iframe: ' + args)\n      }\n    ");const i=new Deferred;let s;i.resolve(),i.then(()=>{const e=()=>t("play"),n=()=>t("pause"),o=e=>{try{const{detail:{data:{position:n}}}=e,t=1e3*n;postToParent({action:"seek",name:name,json:{position:t}})}catch(e){}};window.removeEventListener("user-clicked-play",e),window.addEventListener("user-clicked-play",e),window.removeEventListener("user-clicked-pause",n),window.addEventListener("user-clicked-pause",n),window.removeEventListener("user-seeked",o),window.addEventListener("user-seeked",o)}),window.addEventListener("user-clicked-play",function e(){window.removeEventListener("user-clicked-play",e),l().play(),i.resolve()}),injectScript(`\n      try {\n        if (!window.twoseven.hboVideoController) {\n        }\n        ;(async () => {\n          await Promise.all([\n            window.twoseven.hboVideoController.posterControllerReady,\n            window.twoseven.hboVideoController.posterReady\n          ])\n          try {\n            window.twoseven.hboVideoController.posterController._playVideo('video')\n          } catch (e) {\n            twoseven.reportError('${e}', e, {\n              message: \`Failed to trigger posterController._playVideo('video')\`\n            })\n            console.error(e)\n          }\n        })()\n      } catch (e) {\n        twoseven.reportError('${e}', e, {\n          message: \`Failed to trigger posterController._playVideo('video')\`\n        })\n        console.error(e)\n      }\n    `);const a=setInterval(()=>{const t=l();t&&s!==t&&(s=t,twosevenExtLog(e,"Found new video"),clearInterval(a),t.addEventListener("playing",function r(){t.removeEventListener("playing",r);let i=!0;if(o)try{let n=o.position;o.lastPlayTimestampMS>0&&(n+=Date.now()-o.lastPlayTimestampMS);try{injectScript(`window.twoseven.hboVideoController.seek(${n})`,!0)}catch(t){twoseven.reportError(e,t,`Failed to seek to seekPos: ${n}`)}"playing"===o.status&&(i=!1)}catch(n){twoseven.reportError(e,n,{message:"Failed to setup video based on currentMediaEntry",currentMediaEntry:o})}else twosevenExtLog(e,"WARNING: Failed to find mediaEntry to restore from");injectScript(`\n          try {\n            if (${i}) {\n              window.twoseven.hboVideoController.pause()\n            } else {\n              window.twoseven.hboVideoController.play()\n            }\n            twoseven.postToParent({\n              action: 'video-controller-ready',\n              name: '${name}',\n              json: { videoSelector: 'hbo' }\n            })\n          } catch (e) {\n            // We have no hboVideoController. This looks to be a caching issue\n            // where our modified script is not being loaded.\n            // In this case, we will show a toast ONCE to the user and attempt\n            // to force-reload. If this fails, then I don't know what to do.\n            twoseven.reportError('${e}', e, 'hboVideoController not registered')\n          }\n        `,!0),injectScript(`\n          async function processEntry (entry) {\n            const { url: srcUrl } = entry\n            if (!srcUrl) {\n              return\n            }\n            const response = await fetch(srcUrl)\n            const text = await response.text()\n            const vtt = await convertTTMLToVTT(text)\n            const url = URL.createObjectURL(new Blob([vtt], {\n              type: 'text/vtt'\n            }))\n            return {\n              kind: 'captions',\n              label: entry.displayName,\n              srclang: entry.language,\n              src: url\n            }\n          }\n          twoseven.captions = []\n          try {\n            const { textTracks = [] } = twoseven\n            for (const entry of textTracks) {\n              processEntry(entry)\n                .then(result => result && twoseven.captions.push(result))\n                .catch(e => {\n                  twoseven.reportError('${e}', e, {\n                    message: 'Error processing captions',\n                    url: entry.url\n                  })\n                  console.error(e)\n                })\n            }\n          } catch (e) {\n            twoseven.reportError('${e}', e, {\n              message: 'Error processing captions',\n              textTracks: JSON.parse(JSON.stringify(twoseven.textTracks))\n            })\n            console.error(e)\n          }\n        `);const s=document.createElement("div");s.id="fs",s.style.cssText="\n        position: absolute;\n        display:none;\n        flex: 1;\n        flex-direction: column;\n        top:0;\n        left:0;\n        z-index: 10000;\n        background-color: #1e1e1e;\n        width:100%;\n        height:100%;\n        ",document.body.appendChild(s);const a=document.createElement("style");a.type="text/css",a.innerHTML="\n        #fs video {\n          width: 100% !important;\n          height: 100% !important;\n        }\n        #fs .plyr__captions {\n          font-family: 'sans-serif';\n        }\n        ",document.head.appendChild(a),injectScript(`\n          const fs = document.querySelector('#fs')\n          const defaultContainer = document.querySelector('body > .default')\n          const iframes = Array.from(document.querySelectorAll('iframe[name="__privateStripeMetricsController0"]'))\n\n          window.twoseven.enterFullscreen = async function() {\n            try {\n              document.querySelector('html').style['overflow-y'] = 'hidden'\n            } catch (e) {\n            }\n            return\n            // We're not initializing plyr anymore\n            const video = document.querySelector('video')\n            window.twoseven.videoParent = video.parentNode\n            fs.style.display = 'block'\n            fs.appendChild(video)\n            defaultContainer.style.display = 'none'\n            iframes.forEach(iframe => { iframe.style.display = 'none' })\n            if (!window.plyr || window.plyr.media !== video) {\n              let { Plyr } = window\n              if (!Plyr) {\n                Plyr = await new Promise(resolve => {\n                  if (window.requirejs) {\n                    requirejs(['Plyr'], resolve)\n                  }\n                })\n              }\n              window.plyr = new Plyr('#fs > video', {\n                controls: [\n                  'play-large',\n                  'play',\n                  'progress',\n                  'current-time',\n                  'mute',\n                  'volume',\n                  'captions',\n                  'fullscreen'\n                ],\n                listeners: {\n                  play (e) {\n                    if (e.target.classList.contains('plyr__poster')) {\n                      // This is happening from a click on the video itself\n                      // HBO's internal handler will handle this for us if events\n                      // bubble up. This is because of HBO's totally broken setup\n                      // where clicks on body even if everything is set to display: none\n                      // will still trigger video play/pause.\n                      // However, if plyr__poster stops event propagation, then\n                      // we still need to handle this.\n                    }\n                    if (plyr.playing) {\n                      triggerEvent(window, 'user-clicked-pause')\n                    } else {\n                      triggerEvent(window, 'user-clicked-play')\n                    }\n                  },\n                  seek (e) {\n                    try {\n                      const videoOffset = twoseven.hboVideoController.controller.__videoOffset\n                      const videoPosition = (((e.target.value / e.target.max) * (plyr.duration))) || 0.5\n                      const position = videoOffset + videoPosition\n                      triggerEvent(window, 'user-seeked', {position})\n                    } catch (e) {\n                      twoseven.reportError('${e}', e, 'plyr failed to seek')\n                      console.error(e)\n                    }\n                  },\n                  fullscreen (e) {\n                    if (plyr.fullscreen.active) {\n                      window.twoseven.exitFullscreen()\n                    }\n                    return true\n                  }\n                }\n              })\n              // Add the captions\n              try {\n                twoseven.defaultTextTracks = video.textTracks\n                twoseven.captions.forEach(entry => {\n                  try {\n                    const track = document.createElement('track')\n\n                    track.kind = entry.kind\n                    track.label = entry.label\n                    track.src = entry.src\n                    track.language = entry.srclang\n                    track.srclang = entry.srclang\n                    track.default = 'true'\n\n                    video.appendChild(track)\n                    entry.track = track\n                  } catch (e) {\n                    twoseven.reportError('${e}', e, {\n                      message: 'Failed to add track element',\n                      entry\n                    })\n                    console.error(e)\n                  }\n                })\n              } catch (e) {\n                twoseven.reportError('${e}', e, 'Failed to add captions')\n                console.error(e)\n              }\n\n              // Stop propagating events from controls and poster onto body\n              // This prevents clicks on the video from triggering clicks on body\n              // which can cause URL updates (see comment above)\n              ['.plyr__controls', '.plyr__poster'].forEach(qs => {\n                document.querySelector(qs).addEventListener('mouseup', e => {\n                  e.stopImmediatePropagation()\n                  e.preventDefault()\n                  return false\n                })\n              })\n            } else {\n              // Move plyr to plyrParent\n              window.twoseven.plyrParent.appendChild(video)\n            }\n            setTimeout(() => {\n              try {\n                const { textTracks: { controller } } = twoseven\n                if (controller && controller.isEnabled !== plyr.captions.toggled) {\n                  plyr.toggleCaptions()\n                }\n              } catch (e) {\n                twoseven.reportError('${e}', e, '[plyr]: Failed to toggle captions')\n                console.error(e)\n              }\n            }, 500)\n            plyr.fullscreen.enter()\n          }\n          window.twoseven.exitFullscreen = function () {\n            try {\n              const html = document.querySelector('html')\n              html.style['overflow-y'] = ''\n            } catch (e) {\n            }\n            return\n            // We're not initializing plyr anymore\n            try {\n              const video = document.querySelector('#fs video')\n              window.twoseven.plyrParent = video.parentNode\n              window.twoseven.videoParent.appendChild(video)\n              fs.style.display = 'none'\n              defaultContainer.style.display = 'block'\n              document.body.style.overflow = 'hidden scroll';\n              iframes.forEach(iframe => { iframe.style.display = 'block' })\n              triggerEvent(window, 'exitFullscreen')\n              try {\n                twoseven.textTracks.controller.isEnabled = plyr.captions.toggled\n              } catch (e) {\n                twoseven.reportError('${e}', e, '[native]: Failed to toggle captions')\n                console.error(e)\n              }\n            } catch (e) {\n              twoseven.reportError('${e}', e, 'Failed during exitFullscreen')\n            }\n          }\n\n          window.moveControls = function() {\n            const divs = Array.from(document.querySelectorAll('div.default'))\n            const timeline = divs.find(div => {\n               const bg = div.style['background-image']\n               return bg && (bg.includes('images/timeline/desktop/background.png') || bg.includes('assets/images/branding/desktop/hbomax/dt-hbomax-logo-in_app.svg'))\n            })\n            const controlsWrapper = timeline.parentNode.parentNode.parentNode\n            controlsWrapper.classList.add('controls-wrapper')\n            fs.appendChild(controlsWrapper)\n          }`),n&&injectScript("window.twoseven.enterFullscreen()",!0)}))},300);let p=!1;return window.addEventListener("user-clicked-fullscreen",()=>{p||(injectScriptByURL(browser.extension.getURL("node_modules/plyr/dist/plyr.js")),p=!0);try{Array.from(document.querySelectorAll(".default")).find(e=>{const n=e.style["background-image"];return n&&(n.includes("logo.svg")||n.includes("dt-hbomax-logo-in_app.svg"))}).parentNode.parentNode.parentNode.click()}catch(n){twoseven.reportError(e,n,"Failed to simulate click on navBar")}postToParent({action:"fullscreen",name:name})}),window.addEventListener("exitFullscreen",()=>{postToParent({action:"fullscreen",name:name})}),r}()}if(o||(o=await postToParent({action:"mediaEntry",videoSelector:"hbo"},!0)),o&&window.location.href===o.videoURL&&(!this.videoID||o.videoData.videoID===this.videoID)){p=!1;let e=o.position;o.lastPlayTimestampMS>0&&(e+=Date.now()-o.lastPlayTimestampMS),await r.seek({position:e}),"playing"===o.status?await r.play():await r.pause(),postToParent({action:"video-controller-ready",name:name,json:{videoSelector:"hbo"}})}s.json.position=0;break}}p&&postToParent(s)}),once(window,"hbo:inject-controller",()=>{injectScript("\n    twoseven.hboVideoController = {\n      play () {\n        return this.controller.play(true)\n      },\n      pause () {\n        return this.controller.pause(true)\n      },\n      seek (pos) { // pos should be in milliseconds\n        if (true) {\n          pos /= 1e3\n        }\n        return this.controller.currentVideoPosition = { position: pos }\n      },\n      get controller () {\n        return this._controller\n      },\n      set controller (v) {\n        const currentController = this._controller\n        if (v !== currentController) {\n          Object.defineProperties(v, {\n            __currentIndex: {\n              get () {\n                const { currentPlayItem: item, playItemList: { playItems: list } } = this\n                return list.indexOf(item)\n              }\n            },\n            __totalOffsetPosition: {\n              get () {\n                return this.currentVideoPosition\n              }\n            },\n            __videoOffset: {\n              get () {\n                const idx = this.__currentIndex\n                const durations = this._getPlayItemDurationsList()\n                let offset = 0\n                for (let i = 0; i <  idx; i++) {\n                  offset += durations[i]\n                }\n                return offset\n              }\n            },\n            __totalDuration: {\n              get () {\n                const durations = this._getPlayItemDurationsList()\n                return durations.reduce((a, b) => a + b, 0)\n              }\n            }\n          })\n        }\n        if (currentController && currentController.videoEventData.assetId !== v.videoEventData.assetId) {\n          // We have a new video\n          // Just change the page's URL\n          const proxy = onChange(v.videoEventData, (path, value, prev) => {\n            if (path === 'assetId') {\n              const href = window.location.href\n              const newHref = href.substring(0, href.indexOf('urn:')) + v.videoEventData.assetId\n              window.location.href = newHref\n            }\n          })\n          v.videoEventData = proxy\n        }\n        this._controller = v\n        this.controllerReady.resolve(v)\n      },\n      posterControllerReady: new Deferred(),\n      controllerReady: new Deferred(),\n      posterReady: new Deferred()\n    }\n\n    window.addEventListener('message', async e => {\n      const { data } = e\n      const { action } = data\n      const validActions = ['hbo-controller-position', 'hbo-controller-duration']\n      if (!validActions.includes(action)) {\n        return\n      }\n      await twoseven.hboVideoController.controllerReady\n      let result\n      switch (action) {\n        case 'hbo-controller-position': {\n          result = twoseven.hboVideoController.controller.__totalOffsetPosition\n        }\n        break\n        case 'hbo-controller-duration': {\n          result = twoseven.hboVideoController.controller.__totalDuration\n        }\n        break\n      }\n      window.twoseven.postResponse(e, result)\n    })\n    triggerEvent(window, 'hbo:controller-injected')\n  ")}),initializeDRMHandler(name,r,{"fullscreen-changed":function({data:e}){n=e.isFullscreen,injectScript(`\n        window.twoseven.isFullscreen = ${n}\n        try {\n          if (${n}) {\n            window.twoseven.enterFullscreen()\n          } else {\n            window.twoseven.exitFullscreen()\n          }\n        } catch (e) {\n          // This needn't be reported\n        }\n      `,!0)}}),postToParent({action:"get-fullscreen-state",name:name}),window.getVideo=l,Object.assign(r,{async sourceChange(n){const t=n.newMedia;c()===t.videoURL||window.location.href.startsWith(t.videoURL)?(l()&&twosevenExtLog(e,"Unexpected state: Did not expect to find video, but found one"),o=t):window.location.href=t.videoURL}})}();