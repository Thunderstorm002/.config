(()=>{const e="[hbo]->new-video-detector",t={url:[{hostSuffix:"hbomax.com"},{hostSuffix:"hbogo.com"}]},o={},n=new PerTabData({},t),r=t=>{const{tabId:o,frameId:r,url:s}=t;n[o]||(n[o]={}),twosevenExtLog(e,`${o}:${r}: URL updated: ${s}`);const a=new URI(s);a.removeSearch(a.search(!0)),n[o][r]=a.toString()};browser.webNavigation.onHistoryStateUpdated.addListener(r,t),browser.webNavigation.onCommitted.addListener(r,t);const s=[new RegExp("urn:hbo:page:.*"),new RegExp("urn:hbo:series:.*")];let a;function i(e){const t=new URI(e);return t.removeSearch(t.search(!0)),(e=t.toString()).substr(e.indexOf("urn:"))}async function c(t,o){const n=await async function(e){const t=i(e);if(!t)return null;try{const e=await axios.post("https://comet.api.hbo.com/content",[{id:t}],{headers:{"Accept-Language":"en-us",Authorization:getHeaderValue("authorization",a),"Content-Type":"application/json",Accept:"application/json"}}),{data:o}=e;return o}catch(e){console.error(e.message)}}(t);if(!n)return void twosevenExtLog(e,`no metadata: ${t}`,"warning");const[r]=n,{body:s}=r,{analyticsId:c,titles:{full:d},images:{tile:u}}=s,l=twoseven.templateReplace(u,{size:"1280x720",compression:"low",protection:"false",scaleDownToFit:"false"});let m,f,h,g;try{const{seasonNumber:e,numberInSeason:t,seriesTitles:n,titles:r}=s;f=r.full,m=n.full,g=e,h=t}catch(o){}return{videoSelector:"hbo",videoURL:t,origin:o&&o.initiator||t,referer:t,strategies:null,headers:[],videoData:{title:d,poster:l,showTitle:m,episodeTitle:f,episodeIndex:h,seasonIndex:g,origin:o&&o.initiator||t,referer:t,videoID:c}}}browser.runtime.onConnect.addListener(t=>{if("hbo-iframe"!==t.name&&"hbo-sync"!==t.name&&"hbo-media-finder"!==t.name)return;const n=getTabIdFromPort(t),r=t.sender.frameId;o[n]||(o[n]={});const s=o[n];s[r]||(s[r]=new Set);const a=s[r];a.add(t),t.onMessage.addListener(async o=>{const{action:n}=o;switch(n){case"get-video-metadata":{if(o.json.url.includes("profileSelect"))return;const n=await c(o.json.url);if(!n)return;t.postMessage({from:e,action:"sourceChange",json:n})}}}),twosevenExtLog(e,`Registered hbo port from ${n}:${r}`),t.onDisconnect.addListener(()=>a.delete(t))}),browser.webRequest.onBeforeSendHeaders.addListener(e=>(getHeaderValue("authorization",e.requestHeaders)&&(a=e.requestHeaders),{requestHeaders:e.requestHeaders}),{urls:["https://comet.api.hbo.com/content"]},["requestHeaders"]),browser.webRequest.onHeadersReceived.addListener(async t=>{const{tabId:r,frameId:d}=t;try{const u=n[r][d];if(u.includes("profileSelect"))return;const l=i(u);if(s.some(e=>e.test(l))||!a)return;const m=await c(u);0===d&&addTabMedia(r,d,m),twosevenExtLog(e,`Informing ${r}:${d} of sourceChange`),Array.from(o[r][d]).forEach(t=>{try{t.postMessage({from:e,action:"sourceChange",json:m})}catch(e){}})}catch(t){}},{urls:["https://*.hbomax.com/videos/*.mpd"]},["responseHeaders"])})();